name: CI

on: push

jobs:
  java-test:
    strategy:
      matrix:
        target: [ubuntu-18.04, macos-10.15, centos7, centos8]
        include:
          - target: ubuntu-18.04
            host: ubuntu-18.04
          - target: macos-10.15
            host: macos-10.15
          - target: centos7
            host: ubuntu-latest
            image: centos:centos7
          - target: centos8
            host: ubuntu-latest
            image: centos:centos8
    runs-on: ${{ matrix.host }}
    container: ${{ matrix.image }}
    env:
      COURSIER_CACHE: /tmp/.cache/coursier/v1
    steps:
      - uses: actions/checkout@v2
      - name: Restore rust cache
        uses: actions/cache@v1
        with:
          key: ${{ github.workflow }}-rust-${{ matrix.target }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ github.workflow }}-rust-${{ matrix.target }}-
          path: ~/.cargo
      - name: Restore coursier cache
        uses: actions/cache@v1
        with:
          key: ${{ github.workflow }}-coursier-${{ hashFiles('java/tests/*.sbt') }}
          restore-keys: |
            ${{ github.workflow }}-coursier-
          path: /tmp/.cache/coursier
      - name: Restore sbt cache
        uses: actions/cache@v1
        with:
          key: ${{ github.workflow }}-sbt-${{ hashFiles('java/tests/*.sbt') }}
          restore-keys: |
            ${{ github.workflow }}-sbt-
          path: ~/.sbt
      - name: Decrypt keys for unit tests
        uses: IronCoreLabs/ironhide-actions/decrypt@v1
        if: matrix.target != 'macos-10.15'
        with:
          keys: ${{ secrets.IRONHIDE_KEYS }}
          input: java/tests/src/test/resources/service-keys.conf.iron
      - name: Decrypt keys for unit tests (MacOS)
        if: matrix.target == 'macos-10.15'
        run: openssl enc -aes-256-cbc -d -K ${{ secrets.GHA_OPENSSL_KEY }} -iv ${{ secrets.GHA_OPENSSL_IV }} -in java/tests/src/test/resources/service-keys.conf.enc -out java/tests/src/test/resources/service-keys.conf
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Install sbt
        # The setup-java action should do this, but it doesn't on MacOS.
        # https://github.com/actions/setup-java/issues/50
        if: matrix.target != 'ubuntu-18.04'
        run: |
          curl -Ls https://git.io/sbt > sbt
          chmod +x sbt
          mv sbt /usr/local/bin/sbt || sudo mv sbt /usr/local/bin/sbt
      - name: Set up centos
        if: matrix.image != ''
        run: |
          # Note that yum will fail if these are run in an order that makes more sense.
          yum install -y clang llvm-devel openssl-devel
          yum group install -y "Development Tools"
      - name: Install llvm (ubuntu)
        if: matrix.target == 'ubuntu-18.04'
        run: sudo apt update && sudo apt install -y llvm
      # Not installing llvm for Mac because https://stackoverflow.com/a/35753922/107357
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt-preview
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
      - uses: actions-rs/cargo@v1
        with:
          command: b
      - run: sbt test
        working-directory: java/tests
      - name: Clean the cargo cache
        run: |
          cargo install --no-default-features --features ci-autoclean cargo-cache
          cargo-cache
      - name: Clean the scala cache
        # https://www.scala-sbt.org/1.x/docs/Travis-CI-with-sbt.html#Caching
        run: find ${HOME}/.sbt -name '*.lock' -print -delete

  android-build:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install Cross
        run: cargo install cross --version 0.1.16
      - name: Build
        run: |
          cd android
          ./build_test.sh
      - name: Zip src/main
        run: |
          cd android/ironoxide-android/src/main
          zip -r android_build.zip *
      - name: Upload src/main as artifact
        uses: actions/upload-artifact@v1
        with:
          name: android_build
          path: android/ironoxide-android/src/main/android_build.zip

  android-test:
    needs: android-build
    runs-on: macOS-10.15
    strategy:
      matrix:
        arch: [x86, x86_64]
        target: [default, google_apis]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download android build
        uses: actions/download-artifact@v1
        with:
          name: android_build
      - name: Unzip Android build
        run: unzip -o android_build/android_build.zip -d android/ironoxide-android/src/main
      - name: Decrypt keys for unit tests
        run: openssl enc -aes-256-cbc -d -K ${{ secrets.GHA_OPENSSL_KEY }} -iv ${{ secrets.GHA_OPENSSL_IV }} -in android/ironoxide-android/src/androidTest/resources/deviceContext.json.enc -out android/ironoxide-android/src/androidTest/resources/deviceContext.json
      - name: Output debugging
        run: ls -alR android/ironoxide-android/src
      - name: Run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          working-directory: ./android
          arch: ${{ matrix.arch }}
          api-level: 29
          target: ${{ matrix.target }}
          script: ./gradlew connectedCheck

  security:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Rust security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
