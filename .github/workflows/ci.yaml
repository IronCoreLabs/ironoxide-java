name: CI

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  validate:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Validate version files
      run: .github/set-versions.sh -c 0.0.1

  java-test:
    strategy:
      matrix:
        target: [ubuntu-18.04, macos-10.15, centos7, centos8]
        include:
          - target: ubuntu-18.04
            host: ubuntu-18.04
          - target: macos-10.15
            host: macos-10.15
          - target: centos7
            host: ubuntu-latest
            image: centos:centos7
          - target: centos8
            host: ubuntu-latest
            image: centos:centos8
    runs-on: ${{ matrix.host }}
    container: ${{ matrix.image }}
    env:
      COURSIER_CACHE: /tmp/.cache/coursier/v1
    steps:
      - uses: actions/checkout@v2
      # Work around https://github.com/actions/cache/issues/133#issuecomment-599102035
      - name: Fix perms on .cargo so we can restore the cache.
        run: |
          if [ -e ~/.cargo ] ; then
            if [ -e "$(which sudo)" ] ; then
              SUDO=$(which sudo)
            fi
            ${SUDO} chown -R $(whoami):$(id -ng) ~/.cargo/
          fi
      - name: Restore rust cache
        uses: actions/cache@v1
        with:
          key: ${{ github.workflow }}-rust-${{ matrix.target }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ github.workflow }}-rust-${{ matrix.target }}-
          path: ~/.cargo
      - name: Restore coursier cache
        uses: actions/cache@v1
        with:
          key: ${{ github.workflow }}-coursier-${{ hashFiles('java/tests/*.sbt') }}
          restore-keys: |
            ${{ github.workflow }}-coursier-
          path: /tmp/.cache/coursier
      - name: Restore sbt cache
        uses: actions/cache@v1
        with:
          key: ${{ github.workflow }}-sbt-${{ hashFiles('java/tests/*.sbt') }}
          restore-keys: |
            ${{ github.workflow }}-sbt-
          path: ~/.sbt
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Install sbt
        # The setup-java action should do this, but it doesn't on MacOS.
        # https://github.com/actions/setup-java/issues/50
        if: matrix.target != 'ubuntu-18.04'
        run: |
          curl -Ls https://git.io/sbt > sbt
          chmod +x sbt
          mv sbt /usr/local/bin/sbt || sudo mv sbt /usr/local/bin/sbt
      - name: Set up centos
        if: matrix.image != ''
        run: |
          # Note that yum will fail if these are run in an order that makes more sense.
          yum install -y clang llvm-devel openssl-devel
          yum group install -y "Development Tools"
      - name: Install llvm (ubuntu)
        if: matrix.target == 'ubuntu-18.04'
        run: sudo apt-get update && sudo apt-get install -y llvm
      # Not installing llvm for Mac because https://stackoverflow.com/a/35753922/107357
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
      - name: Cargo fmt and build
        run: cargo fmt -- --check && cargo build -p ironoxide-java
      - name: Scala tests
        run: sbt test
        working-directory: java/tests
      - name: Clean the cargo cache
        run: |
          cargo install --no-default-features --features ci-autoclean cargo-cache
          cargo-cache
      - name: Clean the scala cache
        # https://www.scala-sbt.org/1.x/docs/Travis-CI-with-sbt.html#Caching
        run: find ${HOME}/.sbt -name '*.lock' -print -delete

  android-build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        arch: [i686-linux-android, x86_64-linux-android, aarch64-linux-android]
        include:
          - arch: i686-linux-android
            folder-name: x86
          - arch: x86_64-linux-android
            folder-name: x86_64
          - arch: aarch64-linux-android
            folder-name: arm64-v8a
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install Cross
        run: cargo install cross --version 0.1.16
      - name: Build
        run: |
          cross build --target ${{ matrix.arch }} -p ironoxide-android
          cp -r target/${{ matrix.arch }}/debug/build/ironoxide-android*/out/java android/ironoxide-android/src/main/
          mkdir -p android/ironoxide-android/src/main/jniLibs/${{ matrix.folder-name }}/
          cp -r target/${{ matrix.arch }}/debug/libironoxide_android.so android/ironoxide-android/src/main/jniLibs/${{ matrix.folder-name }}/
      - name: Zip src/main
        run: |
          cd android/ironoxide-android/src/main
          zip -r android_build.zip *
      - name: Upload src/main as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.folder-name }}
          path: android/ironoxide-android/src/main/android_build.zip

  # As the currently available emulators cannot use arm64-v8a architecture, we are currently only testing x86/x86_64.
  # This can be added in when either of the following happens:
  #   - reactivecircus/android-emulator-runner@v2 supports the arm64-v8a architecture for testing
  #   - api-level 30 is stabilized, as that allows x86_64 to run arm64-v8a
  android-test:
    needs: android-build
    runs-on: macos-10.15
    strategy:
      matrix:
        api-level: [24, 29]
        arch: [x86, x86_64]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download android build
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.arch }}
      - name: Unzip Android build
        run: unzip -o ${{ matrix.arch }}/android_build.zip -d android/ironoxide-android/src/main
      - name: Decrypt keys for unit tests
        run: openssl enc -aes-256-cbc -d -K ${{ secrets.GHA_OPENSSL_KEY }} -iv ${{ secrets.GHA_OPENSSL_IV }} -in android/ironoxide-android/src/androidTest/resources/deviceContext.json.enc -out android/ironoxide-android/src/androidTest/resources/deviceContext.json
      - name: Run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          working-directory: ./android
          arch: ${{ matrix.arch }}
          api-level: ${{ matrix.api-level }}
          script: ./gradlew connectedCheck

  cpp-build:
    strategy:
      matrix:
        target: [ubuntu-18.04, macos-10.15]
        include:
          - target: ubuntu-18.04
            host: ubuntu-18.04
          - target: macos-10.15
            host: macos-10.15
    runs-on: ${{ matrix.host }}
    container: ${{ matrix.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Get Cmake
        uses: lukka/get-cmake@latest
      - name: Build
        run: |
          cargo build --release -p ironoxide-cpp
          cd cpp/
          cmake .
          make
          ./cpp-tests
