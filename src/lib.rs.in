use log::error; //This is used as part of Swig expansion as a transitive dependency
use chrono::{DateTime, Utc};
use crate::jni_c_header::*;
use crate::{
    document_access_change_result::{DocumentAccessChange, FailedResult, SucceededResult},
    group_get_result::GroupUserList
};

///
/// Classes for Common Types
///

foreigner_class!(
/// Represents an asymmetric public key that wraps the underlying bytes
/// of the key.
class PublicKey {
    self_type PublicKey;
    private constructor = empty;
    method public_key::as_bytes(&self) -> Vec<i8>; alias asBytes;
});

foreigner_class!(
/// Represents an asymmetric private key that wraps the underlying bytes
/// of the key.
class PrivateKey {
    self_type PrivateKey;
    private constructor = empty;
    static_method private_key::validate(&[i8]) -> Result<PrivateKey, String>;
    method private_key::as_bytes(&self) -> Vec<i8>; alias asBytes;
});

foreigner_class!(
/// Signing keypair specific to a device. Used to sign all requests to the IronCore API
/// endpoints. Needed to create a `DeviceContext`.
class DeviceSigningKeyPair {
    self_type DeviceSigningKeyPair;
    private constructor = empty;
    static_method device_signing_keys::validate(&[i8]) -> Result<DeviceSigningKeyPair, String>;
    method device_signing_keys::as_bytes(&self) -> Vec<i8>; alias asBytes;
});

foreigner_class!(
/// ID of a user. Unique with in a segment. Must match the regex `^[a-zA-Z0-9_.$#|@/:;=+'-]+$`.
class UserId {
    self_type UserId;
    private constructor = empty;
    static_method user_id::validate(s: &str) -> Result<UserId, String>;
    method user_id::id(&self) -> String; alias getId;
    foreigner_code r#"
    @Override
    public int hashCode() {
        return this.getId().hashCode();
    }
    public boolean equals(Object obj) {
        if(obj instanceof UserId){
            UserId id = (UserId) obj;
            return id.getId().equals(this.getId());
        }
        return false;
    }
"#;
});

foreigner_class!(
/// ID of a group. Unique within a segment. Must match the regex `^[a-zA-Z0-9_.$#|@/:;=+'-]+$`
class GroupId {
    self_type GroupId;
    private constructor = empty;
    static_method group_id::validate(s: &str) -> Result<GroupId, String>;
    method group_id::id(&self) -> String; alias getId;
    foreigner_code r#"
    @Override
    public int hashCode() {
        return this.getId().hashCode();
    }
    public boolean equals(Object obj) {
        if(obj instanceof GroupId){
            GroupId id = (GroupId) obj;
            return id.getId().equals(this.getId());
        }
        return false;
    }
"#;
});

foreigner_class!(
/// Group's user-assigned name. (non-unique)
class GroupName {
    self_type GroupName;
    private constructor = empty;
    static_method group_name::validate(s: &str) -> Result<GroupName, String>;
    method group_name::name(&self) -> String; alias getName;
    method GroupName::clone(&self) -> GroupName;
    foreigner_code r#"
    @Override
    public int hashCode() {
        return this.getName().hashCode();
    }
    public boolean equals(Object obj) {
        if(obj instanceof GroupName){
            GroupName name = (GroupName) obj;
            return name.getName().equals(this.getName());
        }
        return false;
    }
"#;
});

foreigner_class!(
/// ID of a document. Unique within the segment. Must match the regex `^[a-zA-Z0-9_.$#|@/:;=+'-]+$`.
class DocumentId {
    self_type DocumentId;
    private constructor = empty;
    static_method document_id::validate(s: &str) -> Result<DocumentId, String>;
    method document_id::id(&self) -> String; alias getId;
    foreigner_code r#"
    @Override
    public int hashCode() {
        return this.getId().hashCode();
    }
    public boolean equals(Object obj) {
        if(obj instanceof DocumentId){
            DocumentId id = (DocumentId) obj;
            return id.getId().equals(this.getId());
        }
        return false;
    }
"#;
});

foreigner_class!(
/// Document name type. Validates that the provided document name isn't an empty string
class DocumentName {
    self_type DocumentName;
    private constructor = empty;
    static_method document_name::validate(s: &str) -> Result<DocumentName, String>;
    method document_name::name(&self) -> String; alias getName;
    method DocumentName::clone(&self) -> DocumentName;
    foreigner_code r#"
    @Override
    public int hashCode() {
        return this.getName().hashCode();
    }
    public boolean equals(Object obj) {
        if(obj instanceof DocumentName){
            DocumentName name = (DocumentName) obj;
            return name.getName().equals(this.getName());
        }
        return false;
    }
"#;
});

foreigner_class!(
/// ID of a device. Device IDs are numeric and will always be greater than 0.
class DeviceId {
    self_type DeviceId;
    private constructor = empty;
    static_method device_id::validate(s: i64) -> Result<DeviceId, String>;
    method device_id::id(&self) -> i64; alias getId;
    method DeviceId::clone(&self) -> DeviceId;
    foreigner_code r#"
    @Override
    public int hashCode() {
        return Long.hashCode(this.getId());
    }
    public boolean equals(Object obj) {
        if(obj instanceof DeviceId){
            DeviceId id = (DeviceId) obj;
            return id.getId() == this.getId();
        }
        return false;
    }
"#;
});

foreigner_class!(
/// Device name type. Validates that the provided name isn't an empty string
class DeviceName {
    self_type DeviceName;
    private constructor = empty;
    static_method device_name::validate(s: &str) -> Result<DeviceName, String>;
    method device_name::name(&self) -> String; alias getName;
    method DeviceName::clone(&self) -> DeviceName;
    foreigner_code r#"
    @Override
    public int hashCode() {
        return this.getName().hashCode();
    }
    public boolean equals(Object obj) {
        if(obj instanceof DeviceName){
            DeviceName name = (DeviceName) obj;
            return name.getName().equals(this.getName());
        }
        return false;
    }
"#;
});

foreigner_class!(
/// Represents a User struct which is returned from document get to show the IDs of users the document is visible to
class VisibleUser {
    self_type VisibleUser;
    private constructor = empty;
    method visible_user::id(&self) -> UserId; alias getId;
});

foreigner_class!(
/// Represents a Group struct which is returned from document get to show the IDs and names of groups the document is visible to
class VisibleGroup {
    self_type VisibleGroup;
    private constructor = empty;
    method visible_group::id(&self) -> GroupId; alias getId;
    method visible_group::name(&self) -> Option<GroupName>; alias getName;
});

foreigner_class!(
/// A single grant/remove failure for a user.
class UserAccessErr {
    self_type UserAccessErr;
    private constructor = empty;
    method UserAccessErr::id(&self) -> UserId; alias getId;
    method UserAccessErr::err(&self) -> String; alias getErr;
});

foreigner_class!(
/// A single grant/remove failure for a group.
class GroupAccessErr {
    self_type GroupAccessErr;
    private constructor = empty;
    method GroupAccessErr::id(&self) -> GroupId; alias getId;
    method GroupAccessErr::err(&self) -> String; alias getErr;
});

foreigner_class!(class UserWithKey {
    self_type UserWithKey;
    private constructor = empty;
    method UserWithKey::user(&self) -> UserId; alias getUser;
    method UserWithKey::public_key(&self) -> PublicKey; alias getPublicKey;
});

foreigner_class!(class GroupUserList {
    self_type GroupUserList;
    private constructor = empty;
    method GroupUserList::list(&self) -> Vec<UserId>; alias getList;
});

///
/// SDK Initialization Structure
///

foreigner_class!(
/// Accounts device context. Needed to initialize the Sdk with a set of device keys. See `Sdk.initialize()`
class DeviceContext {
    self_type DeviceContext;
    constructor device_context::new(account_id: &UserId, segment_id: i64, private_device_key: &PrivateKey, signing_keys: &DeviceSigningKeyPair) -> DeviceContext;
    method device_context::account_id(&self) -> UserId; alias getAccountId;
    method device_context::segment_id(&self) -> usize; alias getSegmentId;
    method device_context::private_device_key(&self) -> PrivateKey; alias getPrivateDeviceKey;
    method device_context::signing_keys(&self) -> DeviceSigningKeyPair; alias getSigningKeys;
});

///
/// User Operation Classes
///

foreigner_class!(
/// Keypair for a newly created user.
class UserCreateKeyPair {
    self_type UserCreateKeyPair;
    private constructor = empty;
    /// user's private key encrypted with the provided passphrase
    method user_create_key_pair::user_encrypted_master_key_bytes(&self) -> Vec<i8>; alias getUserEncryptedMasterKey;
    method user_create_key_pair::user_public_key(&self) -> PublicKey; alias getUserPublicKey;
});

foreigner_class!(
/// IDs and public key for existing user on verify result
class UserVerifyResult {
    self_type UserVerifyResult;
    private constructor = empty;
    method user_verify_result::account_id(&self) -> UserId; alias getAccountId;
    method user_verify_result::segment_id(&self) -> usize; alias getSegmentId;
    method user_verify_result::user_public_key(&self) -> PublicKey; alias getUserPublicKey;
});

foreigner_class!(
/// Metadata about a user device.
class UserDevice {
    self_type UserDevice;
    private constructor = empty;
    /// Get the unique id for the device
    method user_device::id(&self) -> DeviceId; alias getId;
    /// Get the devices optional non-unique readable name
    method user_device::name(&self) -> Option<DeviceName>; alias getName;
    /// Get the time the device was created
    method user_device::last_updated(&self) -> DateTime<Utc>; alias getLastUpdated;
    /// Get the time the device was last updated
    method user_device::created(&self) -> DateTime<Utc>; alias getCreated;
    /// True if this device instance is the one that was used to make
    /// the API request
    method UserDevice::is_current_device(&self) -> bool; alias isCurrentDevice;
});

foreigner_class!(class DeviceCreateOpts {
    self_type DeviceCreateOpts;
    //Construct the DeviceCreateOpts with None for name.
    constructor DeviceCreateOpts::default() -> DeviceCreateOpts;
    static_method device_create_opt::create(_:Option<DeviceName>) -> DeviceCreateOpts;
});

foreigner_class!(
/// Devices for a user, sorted by the device id.
class UserDeviceListResult {
    self_type UserDeviceListResult;
    private constructor = empty;
    method user_device_list_result::result(&self) -> Vec<UserDevice>; alias getResult;
});

///
/// Group Operation Classes
///

foreigner_class!(
/// Abbreviated group meta information.
class GroupMetaResult{
    self_type GroupMetaResult;
    private constructor = empty;
    method group_meta_result::id(&self) -> GroupId; alias getId;
    method group_meta_result::name(&self) -> Option<GroupName>; alias getName;
    method GroupMetaResult::is_admin(&self) -> bool; alias isAdmin;
    method GroupMetaResult::is_member(&self) -> bool; alias isMember;
    method group_meta_result::created(&self) -> DateTime<Utc>; alias getCreated;
    method group_meta_result::last_updated(&self) -> DateTime<Utc>; alias getLastUpdated;
});

foreigner_class!(class GroupListResult{
    self_type GroupListResult;
    private constructor = empty;
    method group_list_result::result(&self) -> Vec<GroupMetaResult>; alias getResult;
});

foreigner_class!(class GroupGetResult{
    self_type GroupGetResult;
    private constructor = empty;
    method group_get_result::id(&self) -> GroupId; alias getId;
    method group_get_result::name(&self) -> Option<GroupName>; alias getName;
    method group_get_result::group_master_public_key(&self) -> PublicKey; alias getGroupMasterPublicKey;
    method GroupGetResult::is_admin(&self) -> bool; alias isAdmin;
    method GroupGetResult::is_member(&self) -> bool; alias isMember;
    method group_get_result::created(&self) -> DateTime<Utc>; alias getCreated;
    method group_get_result::last_updated(&self) -> DateTime<Utc>; alias getLastUpdated;
    method group_get_result::admin_list(&self) -> Option<GroupUserList>; alias getAdminList;
    method group_get_result::member_list(&self) -> Option<GroupUserList>; alias getMemberList;
});

foreigner_class!(
/// Options for group creation.
class GroupCreateOpts {
    self_type GroupCreateOpts;
    constructor GroupCreateOpts::default() -> GroupCreateOpts;
    /// @param a0 id - unique id of a group within a segment. If none, the server will assign an id.
    /// @param a1 name - human readable name of the group. Does not need to be unique.
    /// @param a2 addAsMember - creating user will (default, true) or will not (false) be added to the group's membership (in addition to being a group admin)
    static_method group_create_opts::create(_:Option<GroupId>, _:Option<GroupName>, _: bool) -> GroupCreateOpts;
});

foreigner_class!(
/// A failure to edit the access list of a document.
class AccessEditFailure{
    self_type AccessEditFailure;
    private constructor = empty;
    /// Get user whose access was to be granted/revoked
    method access_edit_failure::user(&self) -> UserId; alias getUser;
    /// Get the reason for grant/revoke failure
    method access_edit_failure::error(&self) -> String; alias getError;
});

foreigner_class!(
/// Result from requesting changes to a group's membership or administrators. Partial success is supported.
class GroupAccessEditResult{
    self_type GroupAccessEditResult;
    private constructor = empty;
    /// Get the list of users whose access was modified
    method group_access_edit_result::succeeded(&self) -> Vec<UserId>; alias getSucceeded;
    /// Get the users whose access could not be modified
    method group_access_edit_result::failed(&self) -> Vec<AccessEditFailure>; alias getFailed;
});

///
/// Document Operation Classes
///

foreign_enum!(
    /// Represents the reason a document can be viewed by the requesting user.
    enum AssociationType {
        /// User created the document
        Owner = AssociationType::Owner,
        /// User directly granted access to the document
        FromUser = AssociationType::FromUser,
        /// User granted access to the document via a group they are a member of
        FromGroup = AssociationType::FromGroup,
    }
);

foreigner_class!(
/// Options for document creation.
class DocumentCreateOpts {
    self_type DocumentCreateOpts;
    constructor DocumentCreateOpts::default() -> DocumentCreateOpts;
    /// @param a0 id            - unique id of a document. If none, the server will assign an id
    /// @param a1 name          - human readable name of the document. Does not need to be unique
    /// @param a2 userGrants    - list of user ids that will be granted access to the document
    /// @param a3 groupGrants   - list of group ids that will be granted access to the document
    static_method document_create_opt::create(_:Option<DocumentId>, _:Option<DocumentName>, _: Vec<UserId>, _: Vec<GroupId>) -> DocumentCreateOpts;
});

foreigner_class!(
/// Single document's (abbreviated) metadata. Returned as part of a `DocumentListResult`.
///
/// @see <a href="DocumentMetadataResult.html">`DocumentMetadataResult`</a> for full metadata
class DocumentListMeta{
    self_type DocumentListMeta;
    private constructor = empty;
    method document_list_meta::id(&self) -> DocumentId; alias getId;
    method document_list_meta::name(&self) -> Option<DocumentName>; alias getName;
    method document_list_meta::association_type(&self) -> AssociationType; alias getAssociationType;
    method document_list_meta::created(&self) -> DateTime<Utc>; alias getCreated;
    method document_list_meta::last_updated(&self) -> DateTime<Utc>; alias getLastUpdated;
});

foreigner_class!(
/// Metadata for each of the documents that the current user has access to decrypt.
class DocumentListResult{
    self_type DocumentListResult;
    private constructor = empty;
    method document_list_result::result(&self) -> Vec<DocumentListMeta>; alias getResult;
});

foreigner_class!(
/// Full metadata for a document.
class DocumentMetadataResult{
    self_type DocumentMetadataResult;
    private constructor = empty;
    method document_metadata_result::id(&self) -> DocumentId; alias getId;
    method document_metadata_result::name(&self) -> Option<DocumentName>; alias getName;
    method document_metadata_result::created(&self) -> DateTime<Utc>; alias getCreated;
    method document_metadata_result::last_updated(&self) -> DateTime<Utc>; alias getLastUpdated;
    method document_metadata_result::association_type(&self) -> AssociationType; alias getAssociationType;
    method document_metadata_result::visible_to_users(&self) -> Vec<VisibleUser>; alias getVisibleToUsers;
    method document_metadata_result::visible_to_groups(&self) -> Vec<VisibleGroup>; alias getVisibleToGroups;
});

foreigner_class!(
/// Result for encrypt operations.
class DocumentEncryptResult{
    self_type DocumentEncryptResult;
    private constructor = empty;
    /// Unique (within the segment) id of the document
    method document_encrypt_result::id(&self) -> DocumentId; alias getId;
    /// Non-unique document name
    method document_encrypt_result::name(&self) -> Option<DocumentName>; alias getName;
    /// Bytes of encrypted document content
    method document_encrypt_result::encrypted_data(&self) -> Vec<i8>; alias getEncryptedData;
    /// When the document was created
    method document_encrypt_result::created(&self) -> DateTime<Utc>; alias getCreated;
    /// When the document was last updated
    method document_encrypt_result::last_updated(&self) -> DateTime<Utc>; alias getLastUpdated;
    /// Get the users and groups whose access was successfully changed
    method DocumentAccessChange::changed(&self) -> SucceededResult; alias getChanged;
    /// Get the users and groups whose access failed to be modified
    method DocumentAccessChange::errors(&self) -> FailedResult; alias getErrors;
});

foreigner_class!(
/// Result of decrypting a document. Includes minimal metadata as well as the decrypted bytes.
class DocumentDecryptResult{
    self_type DocumentDecryptResult;
    private constructor = empty;
    method document_decrypt_result::id(&self) -> DocumentId; alias getId;
    method document_decrypt_result::name(&self) -> Option<DocumentName>; alias getName;
    method document_decrypt_result::decrypted_data(&self) -> Vec<i8>; alias getDecryptedData;
    method document_decrypt_result::created(&self) -> DateTime<Utc>; alias getCreated;
    method document_decrypt_result::last_updated(&self) -> DateTime<Utc>; alias getLastUpdated;
});

foreigner_class!(
// A successful edit of the access list of a document.
class SucceededResult {
    self_type SucceededResult;
    private constructor = empty;

    /// Get list of users whose access was granted/revoked
    method document_access_change_result::SucceededResult::users(&self) -> Vec<UserId>; alias getUsers;
    /// Get list of groups whose access was granted/revoked
    method document_access_change_result::SucceededResult::groups(&self) -> Vec<GroupId>; alias getGroups;
});

foreigner_class!(
/// A failure to edit the access list of a document.
class FailedResult {
    self_type FailedResult;
    private constructor = empty;

    /// Get list of users whose access was to be granted/revoked
    method document_access_change_result::FailedResult::users(&self) -> Vec<UserAccessErr>; alias getUsers;
    /// Get list of groups whose access was to be granted/revoked
    method document_access_change_result::FailedResult::groups(&self) -> Vec<GroupAccessErr>; alias getGroups;
    /// Utility method to check if the list of failures is empty
    method document_access_change_result::FailedResult::is_empty(&self) -> bool; alias isEmpty;

});

foreigner_class!(
/// Result of granting or revoking access to a document. Both grant and revoke support partial
/// success.
class DocumentAccessResult {
    self_type DocumentAccessResult;
    private constructor = empty;

    /// Get the users and groups whose access was successfully changed
    method DocumentAccessChange::changed(&self) -> SucceededResult; alias getChanged;
    /// Get the users and groups whose access failed to be modified
    method DocumentAccessChange::errors(&self) -> FailedResult; alias getErrors;

});

///
/// Full SDK Class Structure
///

foreigner_class!(
/// Struct that is used to make authenticated requests to the IronCore API. Instantiated with the details
/// of an accounts various ids, device, and signing keys. Once instantiated all operations will be
/// performed in the context of the account provided.
class IronSdk {
    self_type IronSdk;
    private constructor = empty;
    static_method user_verify(_:&str) -> Result<Option<UserVerifyResult>, String>; alias userVerify;
    static_method user_create(_:&str, _:&str) -> Result<UserCreateKeyPair, String>; alias userCreate;
    /// Initialize IronSdk with a device. Verifies that the provided user/segment exists and the provided device
    /// keys are valid and exist for the provided account.
    /// 
    /// @throws if the provided `DeviceContext` is invalid
    /// @return an instance of the IronSdk
    static_method initialize(_:&DeviceContext) -> Result<IronSdk, String>;
    /// Generates a new device for the user specified in the signed JWT.
    ///
    /// This will result in a new transform key (from the user's master private key to the new device's public key)
    /// being generated and stored with the IronCore Service.
    ///
    /// @param a0 `jwt`                     - valid IronCore JWT
    /// @param a1 `password`                - password used to encrypt and escrow the user's private key
    /// @param a2 `deviceCreateOptions`     - optional values, like device name
    ///
    /// @return details about the newly created device
    static_method generate_new_device(_:&str, _:&str, _: &DeviceCreateOpts) -> Result<DeviceContext, String>; alias generateNewDevice;
    /// Get all the devices for the current user
    ///
    /// @return all devices for the current user, sorted by the device id
    method user_list_devices(&self) -> Result<UserDeviceListResult, String>; alias userListDevices;
    /// Get a list of user public keys given their IDs. Allows discovery of which user IDs have keys in the
    /// IronCore system to determine of they can be added to groups or have documents shared with them.AsMut
    ///
    /// @param a0 users - list of user IDs to check
    ///
    /// @return map from user ID to users public key. Only users who have public keys will be returned in the map
    method user_get_public_key(&self, _:Vec<UserId>) -> Result<Vec<UserWithKey>, String>; alias userGetPublicKey;
    /// Delete a user device.
    ///
    /// If deleting the currently signed in device (None for `device_id`), the sdk will need to be
    /// reinitialized with `IronSdk.initialize()` before further use.
    ///
    /// @param a0 `deviceId` - id of the device to delete. If `null`, delete the currently signed in device {@link com.ironcorelabs.sdk.IronSdk.userListDevices} to get ids
    ///
    /// @return id of deleted device or IronSdkErr
    method user_delete_device(&self, device_id: Option<DeviceId>) -> Result<DeviceId, String>; alias userDeleteDevice;
    /// List all of the documents that the current user is able to decrypt.
    ///
    /// @return {@link com.ironcorelabs.sdk.DocumentListResult} struct with vec of metadata about each document the user can decrypt.
    method document_list(&self) -> Result<DocumentListResult, String>; alias documentList;
    /// Get the metadata for a specific document given its id.
    ///
    /// @param a0 `id` - unique id of the document to retrieve
    ///
    /// @return {@link com.ironcorelabs.sdk.DocumentMetadataResult} with details about the requested document.
    method document_get_metadata(&self, _:&DocumentId) -> Result<DocumentMetadataResult, String>; alias documentGetMetadata;
    /// Attempt to parse the document id out of an encrypted document.
    ///
    /// @param a0 `encryptedDocument` - encrypted document bytes
    ///
    /// @throws if provided encrypted document has no header
    /// @return extracted id
    method document_get_id_from_bytes(&self, _:&[i8]) -> Result<DocumentId, String>; alias documentGetIdFromBytes;
    /// Encrypt the provided document bytes.
    ///
    /// @param a0 `documentData`   - bytes of the document to encrypt
    /// @param a1 `encryptOpts`    - optional document encrypt parameters
    /// @param a2 `id`             - unique id to use for the document. Document id will be stored unencrypted and must be unique per segment
    method document_encrypt(&mut self,_: &[i8], _: &DocumentCreateOpts) -> Result<DocumentEncryptResult, String>; alias documentEncrypt;
    /// Update the encrypted content of an existing document. Persists any existing access to other users and groups.
    ///
    /// @param a0 `id`                - id of document to update
    /// @param a1 `newDocumentData`   - updated document content to encrypt
    method document_update_bytes(&mut self, _: &DocumentId, _: &[i8]) -> Result<DocumentEncryptResult, String>; alias documentUpdateBytes;
    /// Decrypts the provided encrypted document and returns details about the document as well as its decrypted bytes.
    ///
    /// @param a0 `encryptedDocument` - bytes of encrypted document. Should be the same bytes returned from {@link com.ironcorelabs.sdk.IronSdk.documentEncrypt}
    ///
    /// @return {@link com.ironcorelabs.sdk.DocumentDecryptResult} includes metadata about the provided document as well as the decrypted document bytes
    method document_decrypt(&mut self,_: &[i8]) -> Result<DocumentDecryptResult, String>; alias documentDecrypt;
    /// Update a document name to a new value or clear its value.
    ///
    /// @param a0 `id`      - id of the document to update
    /// @param a1 `name`    - new name for the document. Provide a {@link com.ironcorelabs.sdk.DocumentName} to update to a new name or `null` to clear the name field
    ///
    /// @return metadata about the document that was updated.
    method document_update_name(&self, _: &DocumentId, _: Option<DocumentName>) -> Result<DocumentMetadataResult, String>; alias documentUpdateName;
    /// Grant access to a document. Recipients of document access can be either users or groups.
    ///
    /// @param a0 `documentId` - id of the document whose access is is being modified
    /// @param a1 `grantList`  - list of grants. Elements represent either a user or a group
    ///
    /// @throws the request failed either on the client or the server rejected the whole request
    /// @return each individual grant to a user/group succeeded or failed
    method document_grant_access(&mut self, _: &DocumentId, user_grants: Vec<UserId>, group_grants: Vec<GroupId>)
        -> Result<DocumentAccessResult, String>; alias documentGrantAccess;
    /// Revoke access from a document. Revocation of document access can be either users or groups.
    ///
    /// @param a0 `documentId`     - id of the document whose access is is being modified
    /// @param a1 `revokeList`     - list of revokes. Elements represent either a user or a group
    ///
    /// @throws the request failed either on the client or the server rejected the whole request
    /// @return each individual revoke from a user/group either succeeded or failed
    method document_revoke_access(&self, _: &DocumentId, user_revokes: Vec<UserId>, group_revokes: Vec<GroupId>)
        -> Result<DocumentAccessResult, String>; alias documentRevokeAccess;
    /// List all of the groups that the current user is either an admin or member of.
    ///
    /// @return list of (abbreviated) metadata about each group the user is a part of
    method group_list(&self) -> Result<GroupListResult, String>; alias groupList;
    /// Get the full metadata for a specific group given its ID.
    ///
    /// @param a0 `id` - unique id of the group to retrieve
    ///
    /// @returns details about the requested group
    method group_get_metadata(&self, _:&GroupId) -> Result<GroupGetResult, String>; alias groupGetMetadata;
    /// Create a group. The creating user will become a group admin.
    ///
    /// @param a0 `groupCreateOpts` - see {@link com.ironcorelabs.sdk.GroupCreateOpts}. Use `new GroupGreateOpts()` for defaults
    method group_create(&mut self, _: &GroupCreateOpts) -> Result<GroupMetaResult, String>; alias groupCreate;
    /// Update a group name to a new value or clear its value.
    ///
    /// @param a0 `id`      - id of the group to update
    /// @param a1 `name`    - new name for the group. Provide a {@link com.ironcorelabs.sdk.GroupName} to update to a new name or `null` to clear the name field
    ///
    /// @return metadata about the group that was updated
    method group_update_name(&self, _: &GroupId, _: Option<GroupName>) -> Result<GroupMetaResult, String>; alias groupUpdateName;
    /// Delete the identified group.
    ///
    /// @param a0 `id` - unique id of group
    ///
    /// @throws if it wasn't able to delete the group
    /// @return the deleted group id
    method group_delete(&self, _: &GroupId) -> Result<GroupId, String>; alias groupDelete;
    /// Add the users as members of a group.
    ///
    /// @param a0 `id`      - id of the group to add members to
    /// @param a1 `users`   - the list of users thet will be added to the group as members
    /// 
    /// @return all the users that were added and all the users that were not added with the reason they were not
    method group_add_members(&mut self, _:&GroupId, _:Vec<UserId>) -> Result<GroupAccessEditResult, String>; alias groupAddMembers;
    /// Remove a list of users as members from the group.
    ///
    /// @param a0 `id`          - id of the group to remove members from
    /// @param a1 `revokeList`  - list of user ids to remove as members
    ///
    /// @return list of users that were removed and the users that failed to be removed with the reason they were not
    method group_remove_members(&self, _:&GroupId, _: Vec<UserId>) -> Result<GroupAccessEditResult, String>; alias groupRemoveMembers;
    /// Add the users as admins of a group.
    ///
    /// @param a0 `id`      - id of the group to add admins to
    /// @param a1 `users`   - the list of users that will be added to the group as admins
    /// 
    /// @return all the users that were added and the users that were not added with the reason they were not
    method group_add_admins(&mut self, _:&GroupId, _:Vec<UserId>) -> Result<GroupAccessEditResult, String>; alias groupAddAdmins;
    /// Remove a list of users as admins from the group.
    ///
    /// @param a0 `id`          - id of the group
    /// @param a1 `revokeList`  - list of user ids to remove as admins
    ///
    /// @return list of users that were removed and the users that failed to be removed with the reason they were not
    method group_remove_admins(&self, _:&GroupId, _: Vec<UserId>) -> Result<GroupAccessEditResult, String>; alias groupRemoveAdmins;
});
